plot(resid(dat.lm))
abline(1, 0, col="red")
qqnorm(resid(dat.lm))
qqline(resid(dat.lm), col="red")
shapiro.test(resid(dat.lm))
library(lmtest)
dwtest(standardTest ~ newTest, data=dat)
install.packages("lmtest")
library(lmtest)
dwtest(standardTest ~ newTest, data=dat)
source("~/유전체 분석과정/lecture03/._lecture03.R")
# Chi-Square Test (적합성검정)
chisq.test(c(24,16), p=c(0.7,0.3))
rownames(countTable) <-("Placebo", "Aspirin")
rownames(countTable) <- c("Placebo", "Aspirin")
# (독립성검정) 두 변수가 독립인지 검정
countTable <- matrix( c(10845, 180, 10933, 104), nrow=2, byrow=TRUE)
rownames(countTable) <- c("Placebo", "Aspirin")
colnames(countTable) <- c("No Heart Attack", "Heart Attack")
countTable
chisq.test(countTable)
library(MASS)
head(birthwt)
birthwt$smoke <- factor(birthwt$smoke, labels = c("Non Smoker", "Smoker"))
birthwt$low <- factor( birthwt$low, label=c("No", "Yes"))
smoke_low_tb <- table( birthwt$smoke, birthwt$low)
smoke_low_tb
chisq.test(smoke_low_tb)
# Cocran-Armitage Tend Test
prop.trend.test( c(13,7,21), c(42,14,28))
chisq.test(matrix(c(13, 29, 10, 4, 10, 18), bcol=3))
chisq.test(matrix(c(13, 29, 10, 4, 10, 18), ncol=3))
# McNemar's Test
mcnemar.test(matrix(c(5,15,5,7), ncol=2))
# CrossTable()함수
install.packages("gmodels")
library(gmodels)
CrossTable(countTable, fisher = TRUE, chisq = TRUE, mcnemar = TRUE, expected = TRUE, sresid = TRUE, format=SPSS)
CrossTable(countTable, fisher = TRUE, chisq = TRUE, mcnemar = TRUE, expected = TRUE, sresid = TRUE, format="SPSS")
# fisher test
Cocran-Armitage Tend Test
# fisher test
TeaTasting <- matrix( c(3, 1, 1, 3), nrow=2 )
TeaTasting
fisher.test( TeaTasting )
# ANOVA Test
# 3개 이상 다수의 집단을 비교하고자 할 떄
attach(anorexia)
Change <- Postwt - Prewt
boxplot( Change ~ Treat, col=rainbow(3))
aov.out <- aov( Change ~ Treat )
summary(aov.out)
boxplot( Change ~ Treat, col=rainbow(3))
# 사후검정
# 3 집단간에 어떤 집단의 모평균이 차이가 나는지 알기 위해서 다중비교
TukeyHSD( aov.out )
# 2집단간 pairwise 하게 비교하는 결과가 나옴
# FT-Cont p = 0.0045127 유의한것을 알수 있음
plot(TukeyHSD(aov.out))
pairwise.t.test( Change, Treat)
getwd()
teaching_time <- read.table("/lecture03/teaching_time.txt", header = TRUE, sep=" ")
teaching_time <- read.table("/lecture04/teaching_time.txt", header = TRUE, sep=" ")
teaching_time <- read.table("lecture04/teaching_time.txt", header = TRUE, sep=" ")
getwd()
setwd("C:\Users\SJY\Documents\유전체 분석과정\lecture04")
setwd("/Users/SJY/Documents/유전체 분석과정/lecture04")
getwd()
teaching_time <- read.table("/teaching_time.txt", header = TRUE, sep=" ")
teaching_time <- read.table("teaching_time.txt", header = TRUE, sep=" ")
teaching_time
head(teaching_time)
#반복이 없는 이원분산분석 ( two-way ANOVA )
aov.out <- aov(days ~ ageGroup + method, data=teaching_time)
summary(aov.out)
# 반복이 있는 이원분산분석
summary(ToothGrowth)
ToothGrowth$dose <- factor(ToothGrowth$dose)
ToothGrowth$dose <- factor(ToothGrowth$dose)
summary(ToothGrowth)
aov.out <- aov( len ~ supp*dose, data=ToothGrowth )
summary(aov.out)
# 교호작용
interaction.plot(ToothGrowth$dose, ToothGrowth$supp, ToothGrowth$len)
par( mfrow=c(1, 1) )
suv=c(4, 4, 6, 6, 16)
cars <- data.frame(
truck=c(2, 5, 4, 5, 12),
par( mfrow=c(1, 1) )
cars <- data.frame(
truck=c(2, 5, 4, 5, 12),
cars <- data.frame(
standard=c(1, 3, 6, 4, 9),
truck=c(2, 5, 4, 5, 12),
suv=c(4, 4, 6, 6, 16)
car
cars
par( mfrow=c(1, 1) )
par( mfrow=c(1, 1) )
cars <- data.frame(
standard=c(1, 3, 6, 4, 9),
truck=c(2, 5, 4, 5, 12),
suv=c(4, 4, 6, 6, 16)
)
cars
rownames(cars) <- c("Mon", "Tue", "Wed", "Thu", "Fri")
cars
plot( cars$standard, type="o")
plot( cars$truck, type="o")
plot( cars$suv, type="o")
max_y <- max( cars )
max_y
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=FALSE )
axis
axis(1, at=1:5, lab=rownames(cars) )
axis(2, at=seq(0, max_y, by=4), las=1 )
box()
lines( cars$truck, type="o", pch=22, lty=2, col="red" )
lines( cars$suv, type="o", pch=23, lty=3, col="green" )
title(main="Car Rental", xlab="Weekday", ylab="The Number of Cars")
legend( "topleft", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3 )
library(MASS)
head(birthwt)
factor(birthwt$race)
birthwh$race <- factor( birthwt$race, levels=c(1,2,3), labels=c("white","black","other"))
birthwt$race <- factor( birthwt$race, levels=c(1,2,3), labels=c("white","black","other"))
factor(birthwt$race)
head(birthwt$bwt)
attach(birthwt)
head(bwt)
par(mfrow=c(2,3))
hist(age)
hist(age,freq=FALSE)
hist(age,breaks = c(10,15,17,19,21,24,25,30,35,45))
hist(age, labels=c("1~14", "15~19", "20~24", "25~29", "30~34", "35~39", "40~44") )
hist(age,col="red")
hist(age,col="red", density=10)
par(mfrow=c(1,1))
plot(density(bwt))
plot(density(bwt[race=="black"]), col="black")
lines(density(bwt[race=="white"]), col="red")
lines(density(bwt[race=="other"]), col="blue")
legend( "topright", legend = levels(race), fill=c("red", "black", "blue"))
lines( 1:5 )
par( mfrow=c(1, 1) )
y <- 10:50
plot(y)
y <- 1:5
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab",
type="o", lwd=2, col="blue", pch=24, bg="yellow", cex=1.5)
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab")
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab", type="o")
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab", type="o", lwd=2)
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab", type="o", lwd=2, col="blue")
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab", type="o", lwd=2, col="blue", pch=24)
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab",
type="o", lwd=2, col="blue", pch=24, bg="yellow")
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab",
type="o", lwd=2, col="blue", pch=24, bg="yellow", cex=1.5)
par(mfrow=c(1,2))
boxplot(bwt)
boxplot(bwt ~ race)
boxplot(bwt~smoke, col=rainbow(2), xlab="Smoke", ylab="Birth Weight")
boxplot(bwt~race, col=rainbow(3), xlab="Race", ylab="Birth Weight")
detach(birthwt)
par( mfrow=c(3,3))
plot(y, type = 'p', main="type='p'")
plot(y, type = 'l', main="type='l'")
plot(y, type = 'b', main="type='b'")
plot(y, type = 'c', main="type='c'")
plot(y, type = 'o', main="type='o'")
plot(y, type = 'h', main="type='h'")
plot(y, type = 's', main="type='s'")
plot(y, type = 'S', main="type='S'")
plot(y, type = 'n', main="type='n'")
par(mfrow=c(1,1))
str(iris)
attach(iris)
iris.mean <- aggregate(iris[,1:4], iris["Species"], mean)
iris.mean
iris.sd <- aggregate(iris[,1:4], iris["Species"], sd)
iris.sd
iris.sd.upper <- iris.mean[,2:5] + iris.sd[.2:5]
iris.sd.upper <- iris.mean[,2:5] + iris.sd[,2:5]
iris.sd.lower <- iris.mean[,2:5] - iris.sd[,2:5]
iris.sd.upper
iris.sd.lower
b <- barplot( as.matrix(iris.mean[,2:5], beside=TRUE, col=c("red","blue","purple"), ylim=c(0,8))
b <- barplot( as.matrix(iris.mean[,2:5], beside=TRUE, col=c("red","blue","purple"), ylim=c(0,8))
b <- barplot( as.matrix(iris.mean[,2:5], beside=TRUE, col=c("red","blue","purple"), ylim=c(0,8)))
b <- barplot( as.matrix(iris.mean[,2:5]), beside=TRUE,
col=c(“red”,“blue”,“purple”), ylim=c(0,8) )
b <- barplot( as.matrix(iris.mean[,2:5]), beside=TRUE, col=c("red","blue","purple"), ylim=c(0,8))
arrows(b, as.matrix(iris.sd.upper), b, as.matrix(iris.sd.lower), angle=90)
arrows(b, as.matrix(iris.sd.upper), b, as.matrix(iris.sd.lower), angle=90, length=0.05)
arrows(b, as.matrix(iris.sd.upper), b, as.matrix(iris.sd.lower), angle=90, length=0.05, code=3)
b <- barplot( as.matrix(iris.mean[,2:5]), beside=TRUE, col=c("red","blue","purple"), ylim=c(0,8))
arrows(b, as.matrix(iris.sd.upper), b, as.matrix(iris.sd.lower), angle=90, length=0.05, code=3)
legend("topright", legend=iris.mean$Species, fill=c("Red","blue","purple"))
y <- 10:50
plot(y)
y <- 1:5
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab",
type="o", lwd=2, col="blue", pch=24, bg="yellow", cex=1.5)
# type 변화
par( mfrow=c(3,3))
plot(y, type = 'p', main="type='p'")
plot(y, type = 'l', main="type='l'")
plot(y, type = 'b', main="type='b'")
plot(y, type = 'c', main="type='c'")
plot(y, type = 'o', main="type='o'")
plot(y, type = 'h', main="type='h'")
plot(y, type = 's', main="type='s'")
plot(y, type = 'S', main="type='S'") # 계단 그래프 반대대
plot(y, type = 'S', main="type='S'") # 계단 그래프 반대
plot(y, type = 'p', main="type='p'")
plot(y, type = 'l', main="type='l'")
plot(y, type = 'b', main="type='b'")
plot(y, type = 'c', main="type='c'")
plot(y, type = 'o', main="type='o'")
plot(y, type = 'h', main="type='h'") # 수직막대
plot(y, type = 's', main="type='s'") # 계단 그래프
plot(y, type = 'S', main="type='S'") # 계단 그래프 반대
plot(y, type = 'n', main="type='n'") # no plotting
for( i in 1:6 ) plot(y, type='o', lty=i, main=paste("lty=",i,sep=''))
for( i in 1:6 ) plot(y, type='o', lty=i, main=paste("line type=",i,sep=''))
# Line type
par( mfrow=c(2,3))
for( i in 1:6 ) plot(y, type='o', lty=i, main=paste("line type=",i,sep=''))
colors()
which( colors() == "red")
for( i in 1:9 ) plot(y, type='o', pch=i, main=paste('symbol type=',i,sep=''))
# pch ( plot character or symbol )
par( mfrow=c(3,3))
for( i in 1:9 ) plot(y, type='o', pch=i, main=paste('symbol type=',i,sep=''))
# lines, axis, box, title, legend, matplot 함수
par( mfrow=c(1, 1) )
cars <- data.frame(
standard=c(1, 3, 6, 4, 9),
truck=c(2, 5, 4, 5, 12),
suv=c(4, 4, 6, 6, 16)
)
cars
rownames(cars) <- c("Mon", "Tue", "Wed", "Thu", "Fri")
plot( cars$standard, type="o")
plot( cars$truck, type="o")
plot( cars$suv, type="o")
max_y <- max( cars )
max_y
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=FALSE )
# 최대값으로 y range 범위 제한
# axes=False 축 제거
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=TRUE, ann=FALSE )
# EDA 실습 R Graphic
y <- 10:50
plot(y)
y <- 1:5
# main = 그래프 제목, sub= 바닥에 추가 문구
plot(y, main="This is\nmain", sub="This is sub", xlab="This is xlab", ylab="This is ylab",
type="o", lwd=2, col="blue", pch=24, bg="yellow", cex=1.5)
# type 변화
par( mfrow=c(3,3))
plot(y, type = 'p', main="type='p'")
plot(y, type = 'l', main="type='l'")
plot(y, type = 'b', main="type='b'")
plot(y, type = 'c', main="type='c'")
plot(y, type = 'o', main="type='o'")
plot(y, type = 'h', main="type='h'") # 수직막대
plot(y, type = 's', main="type='s'") # 계단 그래프
plot(y, type = 'S', main="type='S'") # 계단 그래프 반대
plot(y, type = 'n', main="type='n'") # no plotting
# Line type
par( mfrow=c(2,3))
# Line type
par( mfrow=c(2,3))
for( i in 1:6 ) plot(y, type='o', lty=i, main=paste("line type=",i,sep=''))
colors() # 컬러 이름 다 호출
# 컬러 이름의 숫자 명시도 가능 col=552
which( colors() == "red")
# pch ( plot character or symbol )
par( mfrow=c(3,3))
for( i in 1:9 ) plot(y, type='o', pch=i, main=paste('symbol type=',i,sep=''))
# lines, axis, box, title, legend, matplot 함수
par( mfrow=c(1, 1) )
cars <- data.frame(
standard=c(1, 3, 6, 4, 9),
truck=c(2, 5, 4, 5, 12),
suv=c(4, 4, 6, 6, 16)
)
cars
rownames(cars) <- c("Mon", "Tue", "Wed", "Thu", "Fri")
plot( cars$standard, type="o")
plot( cars$truck, type="o")
plot( cars$truck, type="p")
plot( cars$suv, type="l")
max_y <- max( cars )
max_y
# 최대값으로 y range 범위 제한
# axes=False 축 제거
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=TRUE, ann=FALSE )
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=FALSE )
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=TRUE )
axis(1, at=1:5, lab=rownames(cars) )
axis(2, at=seq(0, max_y, by=4), las=1 ) # 축번호 2 = 세로축
box()
# 최대값으로 y range 범위 제한
# axes=False 축 제거
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=TRUE, ann=FALSE )
plot( cars$standard, type="o", col="blue", ylim=c(0, max_y), axes=FALSE, ann=TRUE )
# at = break 그래프 간격
axis(1, at=1:5, lab=rownames(cars) ) # 축변호 1 = 가로축
axis(2, at=seq(0, max_y, by=4), las=1 ) # 축번호 2 = 세로축
lines( cars$truck, type="o", pch=22, lty=2, col="red" )
lines( cars$suv, type="o", pch=23, lty=3, col="green" )
# 그래프 main 이름 삽입
title(main="Car Rental", xlab="Weekday", ylab="The Number of Cars")
# 축 label 덮어씌워줌, reset 해서 다시 그려야 함
legend( "topleft", colnames(cars), col=c("blue", "red", "green"), pch=21:23, lty=1:3 )
legend("center")
legend("center", colnames(cars))
library(MASS)
head(birthwt)
factor(birthwt$race)
birthwt$race <- factor( birthwt$race, levels=c(1,2,3), labels=c("white","black","other"))
factor(birthwt$race)
library(MASS)
head(birthwt)
factor(birthwt$race)
head(birthwt$bwt)
attach(birthwt)
head(bwt)
par(mfrow=c(2,3))
hist(age)
hist(age,freq=FALSE)
hist(age,breaks = c(10,15,17,19,21,24,25,30,35,45))
hist(age, labels=c("1~14", "15~19", "20~24", "25~29", "30~34", "35~39", "40~44") )
hist(age,col="red")
# histogram을 채울 사선의 밀도, 1 inch 당 line의 수.
hist(age, col="red", density=10)
par(mfrow=c(1,1))
plot(density(bwt))
plot(density(bwt), main = 'bwt')
plot(density(bwt[race=="black"]), col="black")
plot(density(bwt[race=="black"]), col="black")
par(mfrow=c(1,1))
plot(density(bwt), main = 'bwt')
plot(density(bwt[race=="black"]), col="black")
plot( density(bwt[race=='black']), col="black" )
lines(density(bwt[race=="white"]), col="red")
lines(density(bwt[race=="other"]), col="blue")
par(mfrow=c(1,2))
boxplot(bwt)
boxplot(bwt ~ race)
attch(birthwt)
attach(birthwt)
par(mfrow=c(1,1))
plot(density(bwt), main = 'bwt')
plot(density(bwt[race=='black']), col="black" )
lines(density(bwt[race=="white"]), col="red")
lines(density(bwt[race=="other"]), col="blue")
par(mfrow=c(1,2))
boxplot(bwt)
boxplot(bwt ~ race)
attach(birthwt)
detach(birthwt)
head( birthwt[, c("bwt", "race")] )
head(birthwt$bwt)
library(MASS)
head(birthwt)
factor(birthwt$race)
detach(birthwt)
head(birthwt)
View(birthwt)
View(birthwt)
library(MASS)
head(birthwt)
factor(birthwt$race)
birthwt$race <- factor( birthwt$race, levels=c(1,2,3), labels=c("white","black","other"))
factor(birthwt$race)
head(birthwt$bwt)
attach(birthwt)
head(bwt)
par(mfrow=c(2,3))
hist(age)
hist(age,freq=FALSE) # y축의 값을 frequencey 가 아닌 probability density로 계산
# x축의 break point를 사용자가 직접 지정
hist(age, breaks = c(10,15,17,19,21,24,25,30,35,45))
# bar에 라벨을 입력ㅊ(python의annotation)
hist(age, labels=c("1~14", "15~19", "20~24", "25~29", "30~34", "35~39", "40~44") )
hist(age, col="red")
# histogram을 채울 사선의 밀도, 1 inch 당 line의 수.
hist(age, col="red", density=10)
head( birthwt[, c("bwt", "race")] )
par(mfrow=c(1,1))
plot(density(bwt), main = 'bwt')
plot(density(bwt[race=='black']), col="black" )
lines(density(bwt[race=="white"]), col="red")
lines(density(bwt[race=="other"]), col="blue")
par(mfrow=c(1,2))
boxplot(bwt)
boxplot(bwt ~ race)
boxplot(bwt~smoke, col=rainbow(2), xlab="Smoke", ylab="Birth Weight")
detach(birthwt)
par(mfrow=c(1,1))
str(iris)
attach(iris)
iris.mean <- aggregate(iris[,1:4], iris["Species"], mean)
iris.mean
iris.sd <- aggregate(iris[,1:4], iris["Species"], sd)
iris.sd
iris.sd.upper <- iris.mean[,2:5] + iris.sd[,2:5]
iris.sd.lower <- iris.mean[,2:5] - iris.sd[,2:5]
b <- barplot( as.matrix(iris.mean[,2:5]), beside=TRUE, col=c("red","blue","purple"), ylim=c(0,8))
#
arrows(b, as.matrix(iris.sd.upper), b, as.matrix(iris.sd.lower), angle=90, length=0.05, code=3)
legend("topright", legend=iris.mean$Species, fill=c("Red","blue","purple"))
library(MASS)
attach(Pima.tr) # 데이터 로드
# Normality Test (정규성 검정)
shapiro.test(bmi) #Shapiro-Wilk normality test를 이용 정규분포 확인
# 시각화
qqnorm(bmi)
qqline(bmi)
# One sample t-test
# Pima 여성들의 평균 bmi 값을 mu 이라고 했을 때, mu=30 -> 귀무가설
t.test(bmi, mu=30)
bmi.ttest <- t.test(bmi, mu=30)
names(bmi.ttest)
bmi.ttest$p.value
bmi.ttest$statistic
t.test(bmi, mu=30, alternative="greater") #  대립 가설이 mu > 30 경우
t.test(bmi, mu=30, alternative="less") #  mu < 30인 경우
# 두 집단의 분산이 같은지 검정하기 위하여 F-test 를 이용하여 등분산 검정을 먼저 수행한다
var.test(bmi ~ type)
# 두 집단의 분산이 같은 경우, pooled variance를 이용 -> two-sample test
# 등분산 확인했을 때 분산이 같지 않음 확인 -> Welch t-test 수행
t.test(bmi ~ type)
data(anorexia)
FT <- subset(anorexia, Treat=='FT')
head(FT)
#몸무게 전 - 몸무게 후
shapiro.test(FT$Prewt - FT$Postwt)
# paired opt 추가
t.test(FT$Prewt, FT$Postwt, paired=TRUE)
CBT <- subset(anorexia, Treat=='CBT')
shapiro.test(CBT$Prewt - CBT$Postwt)
wilcox.test(CBT$Prewt, CBT$Postwt, paired=TRUE)
CBT
dim(CBT)
# p-value 05 이상. 유의하지 않은것 = CBT치료에 의한 몸무게 변화의 차이가 없다.
wilcox.test(CBT$Prewt, CBT$Postwt, paired=TRUE, exact=FALSE)
# Wilcoxon rank sum test( 또는 Mann-Whitney U Test )
placebo <- c(7, 5, 6, 4, 12)
new_drug <- c(3, 6, 4, 2, 1)
new_drug <- c(3, 6, 4, 2, 1)
wilcox.test(placebo, new_drug, exact=FALSE)
attach(iris)
cor(Sepal.Length, Petal.Width)
# p-value, CI 결과return 해주는 상관계수 함수 사용
cor.test(Sepal.Length, Petal.Width)
# col 열 변수 모두 상관계수 분석 = heatmap 시각화 용도로 많이 사용
cor(iris[, 1:4])
pairs(iris[, 1:4]) # 데이터 시각화 산점도 그래프
library(Hmisc)
# 상관계수와 P-value 값을 return 하는 함수를 사용
# 패키지 설치 후 사용해야함 - default corr = pearson 모수 검정
rcorr(as.matrix(iris[, 1:4]))
# 결측치가 있는 경우 상관계수 도출 방법
iris.na.test <- iris[, 1:4] # 결측데이터 만들기위해 복사
iris.na.test[1,1] <- NA
iris.na.test[3,2] <- NA
iris.na.test[4,3] <- NA
head(iris.na.test)
cor(iris.na.test) # 결측치가 있는 경우 cor 함수가 작동하지 않음
#데이터 전처리의 중요성 - 결측치 처리를 해야 검정이 가능하다
#결측치 있는 행을 버리고 상관계수 뽑아냄 = List-wise deletion
cor(iris.na.test, use="complete.obs")
# 결측치가 있는 pair-wise 값만 제거함 : pair-wise deletion
cor(iris.na.test, use="pairwise.complete.obs")
doctorA <- c(4,1,3,2,6,5,8,7)
doctorB <- c(5,3,1,2,6,4,7,8)
cor.test(doctorA, doctorB, method="spearman")
newTest <- c(50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100)
standardTest <- c(61, 61, 59, 71, 80, 76, 90, 106, 98, 100, 114)
dat <- data.frame(newTest, standardTest)
dat
plot(standardTest ~ newTest, data=dat, xlim=c(0, 110), ylim=c(0, 120))
dat.lm <- lm(standardTest ~ newTest, data=dat)
# 회귀식 lm 함수 -> 1차식의 계수와 상수
summary(dat.lm)
abline(dat.lm, col="red")
coef(dat.lm)
predict(dat.lm, newdata=data.frame(newTest=80))
# 예측구간 시각화
pp <- predict(dat.lm, interval="prediction", newdata=dat)
matlines(dat$newTest, pp, lty=c(1,2,3), col="blue")
# 신뢰구간 시각화
pc <-predict( dat.lm, interval = "confidence", newdata = dat)
matlines( dat$newTest, pc, lty=c(1,2,3), col="red")
# 잔차 시각화
par(mfrow=c(1,2))
plot(resid(dat.lm))
abline(1, 0, col="red")
qqnorm(resid(dat.lm))
qqline(resid(dat.lm), col="red")
shapiro.test(resid(dat.lm))
library(lmtest)
# 귀무가설 = 자기상관관계는 0 이다.
# D의 값이 0과 근접하면 높은 양의 자기상관 관계를 가지며,
# D의 값이 4에 근접하면 높은 음의 자기 상관관계를 ,
# D의 값이 2와 근접하면 자기 상관관계가 존재하지 않는다
dwtest(standardTest ~ newTest, data=dat)
